import java.util.function.Consumer

plugins {
    id 'java'
    id 'io.papermc.paperweight.userdev' version '1.3.7'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
}

String minecraftVersion = "1.19.2"
boolean devBuild = false;

group = 'net.forthecrown'
version = minecraftVersion + "-" + buildID()

compileJava.options.encoding = 'UTF-8'
javadoc.options.encoding = 'UTF-8'

repositories {
    mavenCentral()

    maven { url = 'https://papermc.io/repo/repository/maven-public/' }
    maven { url = 'https://oss.sonatype.org/content/groups/public/' }
    maven { url = 'https://maven.enginehub.org/repo/' }
    maven { url = 'https://jitpack.io' }
    maven { url = 'https://mvn.intellectualsites.com/content/repositories/releases/' }
    maven { url = 'https://libraries.minecraft.net' }
    maven { url = 'https://repo.codemc.org/repository/maven-public/' }
    maven { url = 'https://nexus.scarsz.me/content/groups/public/' }
    maven { url = 'https://m2.dv8tion.net/releases' }
    maven { url = 'https://repo.spongepowered.org/repository/maven-public' }
    maven { url = 'https://nexus.bencodez.com/repository/maven-public/' }
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.0'

    //Paper and NMS dependency
    paperweightDevelopmentBundle("io.papermc.paper:dev-bundle:" + minecraftVersion + "-R0.1-SNAPSHOT")

    compileOnly 'org.projectlombok:lombok:1.18.24'
    annotationProcessor 'org.projectlombok:lombok:1.18.24'

    compileOnly 'io.papermc.paper:paper-api:' + minecraftVersion + '-R0.1-SNAPSHOT'
    compileOnly 'io.papermc.paper:paper-mojangapi:' + minecraftVersion + '-R0.1-SNAPSHOT'
    compileOnly 'org.apache.commons:commons-lang3:3.12.0'

    compileOnly 'com.mojang:brigadier:1.0.18'
    compileOnly 'com.mojang:authlib:3.2.38'
    compileOnly 'com.mojang:datafixerupper:4.0.26'

    compileOnly 'org.mcteam.ancientgates:ancientgates:2.6'

    //Annotations????
    compileOnly 'org.jetbrains:annotations:23.0.0'

    //LuckPerms and WorldGuard
    compileOnly 'net.luckperms:api:5.4'
    compileOnly 'com.sk89q.worldguard:worldguard-bukkit:7.0.5-SNAPSHOT'

    // DiscordSRV
    compileOnly 'com.discordsrv:discordsrv:1.25.0'

    // Voting plugin for VoteEvent
    compileOnly 'com.bencodez:votingplugin:6.9.5'

    //Grenadier, Squire, FAWE
    libJar('Grenadier-1.5.3-dev')
    libJar('FAWE')
    libJar('Dynmap')

    // SpongePowered math library
    implementation "org.spongepowered:math:2.1.0-SNAPSHOT"
}

void libJar(String s) {
    dependencies.compileOnly(files('/libs/' + s + '.jar'))
}

java {
    toolchain.languageVersion.set(JavaLanguageVersion.of(17))
}

processResources {
    File pluginYml = new File('build/resources/main/plugin.yml')
    if(pluginYml.exists()) pluginYml.delete()

    def props = [
            version: version,
            buildID : buildID() + "",
            buildDate : new Date().toString(),
            debug_build : devBuild
    ]

    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}

int buildID() {
    int result = 1

    consumeProperties(p -> {
        result = Integer.parseInt(p.getProperty("buildID"))
    })

    return result
}

void incrementBuildID() {
    consumeProperties(properties -> {
        int id = Integer.parseInt(properties.getProperty("buildID"))
        id++

        properties.setProperty("buildID", id + "")
    })
}

void consumeProperties(Consumer<Properties> propertiesConsumer) {
    File f = new File(project.projectDir, 'buildver.properties')
    Properties properties = new Properties()
    properties.load(new FileReader(f))

    propertiesConsumer.accept(properties)

    properties.store(new FileOutputStream(f), "Saves the last build ID, last build:")
}

assemble {
    archivesBaseName = 'ForTheCrown-' + (devBuild ? "Debug" : "Plugin")
    dependsOn(reobfJar)
}

build {
    doLast {
        if (!devBuild) {
            incrementBuildID()
        }
    }
}

test {
    useJUnitPlatform()
}